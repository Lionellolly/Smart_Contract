Instructions to start the Ethereum private network and deploy the smart contract on the network using truffle and geth. 

 

1. Open the terminal and redirect to the KYC-Blockchain folder: cd /{path}/KYC-Blockchain. Also make sure the Init.json file is present inside the desired folder. 

 
2. Enter the following command: 

 geth --datadir ./datadir init ./Init.json –nousb [The flag is to avoid any usb device errors, optional] 

This command will create a private chain data for our blockchain. 


3. Enter the following command: 

 geth --datadir ./datadir --networkid 2019 --rpc --rpcport 30303 --allow-insecure-unlock console 

This command is going to create a new blockchain network and it will start a console 


4. Create new accounts by using the command: personal.newAccount(“degex”) 

degex is the password here.  


5. Unlock the newly created account by entering: personal.unlockAccount(eth.coinbase, ‘degex’, 0) 

eth.coinbase is taken as the first account created by default and the password is 'degex'. 0, in the end, means we need to keep it unlock for an indefinite time. 
 

6. Now hence the network is running and the coinbase account is unlocked for migrating the smart contracts. Now start the mining process in this terminal by entering:  miner.start() 

NOTE: Mining needs to be turned on for a while to let the migration happening successfully. 

 

7. Open another terminal (terminal B) and redirect to the truffle KYC folder in phase-3:  

cd /{path}/trufflekyc 
 

8. To compile the smart contract code in terminal B press: truffle compile 

With this command, you will see that truffle is going to compile all the smart contracts available inside your contracts directory and is going to create the byte-code that needs to be put on top of the blockchain. 
 

10. Copy the KYC.sol file inside the newly created contracts folder. Also, copy the 2_KYC_deployment.js file inside the newly created migrations folder. Both these files are inside the trufflekyc folder in phase-3. 
 

11.  Run the following command in Terminal B: truffle migrate --network geth 

However, the development configuration is used by default, This command will migrate the smart contracts on to the running geth network.  

12. To access the truffle console run the following command: truffle console --network geth 
you will be taken inside the truffle console connected to the geth environment. 


13. Getting inside the truffle console, write the JavaScript statements and perform the desired operations. 

Eg. let kyc = await kyc.deployed(); 

      Kyc.function(“arguments”) 